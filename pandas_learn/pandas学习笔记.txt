import padas as pd
import numpy as np

创建padas序列，就像列表一样，但是有index
s=pd.Series([1,2,3,4,nan,7,8])
index  value的形式  具有dtypes：float64

创建pd.DataFrame
创建时间序列
dates=pd.date_range('20200519',periods=6)

df=pd.DataFrame(np.random.randn(6,4),index=dates,columns=['a','b','c','d'])

可以使用字典来定义DataFrame
df2 = pd.DataFrame({'A' : 1.,
                       'B' : pd.Timestamp('20130102'),
                        'C' : pd.Series(1,index=list(range(4)),dtype='float32'),
                        'D' : np.array([3] * 4,dtype='int32'),
                        'E' : pd.Categorical(["test","train","test","train"]),
                        'F' : 'foo'})
A,B,C,D,E,F为列标，后面Value为列数据


选择数据可以是
df[0:3],df['row'],df['column'],df.column

df.loc['row','column']

df.iloc[3,1]

标签和数字混合
df.ix[:3,['A','C']]

是或则否的删选
df[df.A>8]

pandas选定数据以后设置值
df.iloc[2,2]=111
df.loc['ROW','B']=222
df[df.A>4]=0
df.B[df.A>4]=0


df加上空列
df['F']=np.nan

加上一个序列
df['E']=pd.Series([1,2,3,4,5,6],i9ndex=pd.date_range('20200520',periods=6))


如何处理丢失数据 也就是NaN数据
df.dropna(axis=0,how='any')            丢掉整行  how={'any','all'}   all的话全部为nan才丢掉
df.dropna(axis=1,how='any')            丢掉整列  how={'any','all'}   all的话全部为nan才丢掉

df.fillna(value=0)                              将NaN填入一个指定的value
df.isnull()                                          检查df中是否有丢失数据
np.any(df.isnull)==True                    至少有一个数据丢失了



如何利用pandas来导入导出数据？
data=pd.read_csv('file.csv')

data.to_pickle('file.pickle')


DataFrame的合并
默认合并是outer的合并方法
ignore_index=True      代表忽略行标号         False保留原来的行标号
res = pd.concat([df1, df2, df3], axis=0, ignore_index=True)
concat([df1, df2], axis=1, join='outer')          join='outer'   'inner'    outer:代表两者行的并集，inner：代表两者行的交集

res = pd.concat([df1, df2], axis=1, join_axes=[df1.index])          按1的索引来进行  没有的话就显示NaN


df1.append([df2, df3])   df1
                                    df2
                                    df3

s1 = pd.Series([1,2,3,4], index=['a','b','c','d'])      a  1   b  2   c  3   d  4
res = df1.append(s1, ignore_index=True)


pandas合并之merge来事先更加复杂的合并
merge合并默认的方法是inner，只考虑key相同行的部分
how可以取['left','right','outer','inner']
res = pd.merge(left, right, on=['key1', 'key2'], how='inner')     只保留key1，key2相同部分的行
res = pd.merge(left, right, on=['key1', 'key2'], how='outer')    保留所有key1，key2组合的行，若是没有数据则以NaN来代替
left  代表以左边DataFrame的 key1，key2来合并，右边没有的以NaN来代替
right 代表以右边的key1和key2来合并，左边没有的以NaN来代替



indicator？
indicator给你一个直观的显示merge的方式是一个怎样的merge
res = pd.merge(df1, df2, on='col1', how='outer', indicator=True)
输出多出一列默认名字为_merge

修改indicator的名字
res = pd.merge(df1, df2, on='col1', how='outer', indicator='indicator_column')
那么将会从原来的的名字_merge变成名字indicator_column

# left_index and right_index
res = pd.merge(left, right, left_index=True, right_index=True, how='outer')
根据index来进行合并


# handle overlapping
boys = pd.DataFrame({'k': ['K0', 'K1', 'K2'], 'age': [1, 2, 3]})
girls = pd.DataFrame({'k': ['K0', 'K0', 'K3'], 'age': [4, 5, 6]})
res = pd.merge(boys, girls, on='k', suffixes=['_boy', '_girl'], how='inner')

0    1  K0
1    2  K1
2    3  K2


   age   k
0    4  K0
1    5  K0
2    6  K3

   age_boy   k  age_girl
0        1  K0         4
1        1  K0         5


pandas中可视化数据
import matplotlib.pyplot as plt
data = pd.Series(np.random.randn(1000), index=np.arange(1000))
data = data.cumsum()   累加
data.plot()
plt.show()

data = pd.DataFrame(np.random.randn(1000, 4), index=np.arange(1000), columns=list("ABCD"))
data = data.cumsum()                         默认axis=0
data.head(5)   前5个数据


plot的方法
# plot methods:
# 'bar', 'hist', 'box', 'kde', 'area', scatter', hexbin', 'pie'
ax = data.plot.scatter(x='A', y='B', color='DarkBlue', label="Class 1")
data.plot.scatter(x='A', y='C', color='LightGreen', label='Class 2', ax=ax)			ax=ax代表数据附在ax图上面

plt.show()